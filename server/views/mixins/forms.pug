- const getInputName = (f, property) => `${f.name}[${property}]`

mixin formFor(f, options = {})
  - const url = _.get(options, 'url');
  - const method = _.get(options, 'method', 'get').toLowerCase();
  - const isStandart = _.includes(['get', 'post'], method);
  form(action=url method=isStandart ? method : 'post')
    if !isStandart
      input(name='_method' type='hidden' value=method)
    block

mixin input(f, property, options = { as: 'text' })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group
    label(for=property)= options['label'] || property
    input(
      id=property
      name=getInputName(f, property)
      class=f.errors[property] ? 'form-control is-invalid' : 'form-control'
      type=options['as']
      value=`${value}`
    )
    if f.errors[property]
      .invalid-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin select(f, property, items, itemProperty, options = {}, selectedItems = [])
  .form-group
    label(for=property)=options['label'] || property
    select.custom-select(
      id=property
      name=getInputName(f, property)
      size=options['size']
      multiple=options['multiple']
    )
      each item in items
        option(
          value=item.id
          selected=f.object[property] === item.id || selectedItems.some((s) => s.id === item.id)
        )=item[itemProperty]

mixin button(f, value = 'Save', type = 'submit')
  .form-group
    input.btn.btn-primary(type=`${type}` value=`${value}`)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name='_method' type='hidden' value=method)
    input.btn(type='submit')&attributes(attributes)
